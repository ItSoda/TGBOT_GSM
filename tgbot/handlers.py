import logging
import telebot
from django.conf import settings
from telebot import types

from .models import Admin, Brand, Category, Product, UserBot, News
import re

logger = logging.getLogger("main")

# –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot(settings.TELEGRAM_BOT_TOKEN)


##################################################### CLIENT PART #######################################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.chat.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    markup = types.ForceReply(selective=False)
    try:
        if UserBot.objects.get(user_id=user_id):
            bot.send_message(
                message.chat.id,
                f"–ü—Ä–∏–≤–µ—Ç, {first_name}! \n–≠—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –ú–ê–°–¢–ï–† GSM –ò–°–¢–†–ê. \n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ /catalog —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã.",
                reply_markup=markup,
            )

    except UserBot.DoesNotExist:
        UserBot.objects.create(
            user_id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
        )
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –≠—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –ú–ê–°–¢–ï–† GSM –ò–°–¢–†–ê. \n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ /catalog —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã.",
            reply_markup=markup,
        )


@bot.message_handler(commands=["help"])
def help(message):
    markup = types.ForceReply(selective=False)
    text = "–ö–æ–º–∞–Ω–¥—ã:\n\n/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ \n\n/help - –ü–æ–º–æ—â—å \n\n/catalog - –°–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ \n\n/contacts - –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã \n\n/about_us - –û –Ω–∞—Å"
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user.first_name}\n \n{text}",
        parse_mode="html",
        reply_markup=markup,
    )


@bot.message_handler(commands=["catalog"])
def product_catalog(message):
    categories = Category.objects.all()

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    for category in categories:
        products = Product.objects.filter(category=category).order_by("price").order_by("name")
        if products.count() != 0:
            button = types.KeyboardButton(text=f"{category.name} ({products.count()})")
            keyboard.add(button)

    bot.send_message(
        message.chat.id,
        "–ú–ê–°–¢–ï–† GSM –ò–°–¢–†–ê. \n–¢–ï–õ–ï–§–û–ù: 89774532753 \n–ù–û–í–´–ï –¢–û–ü–û–í–´–ï –¢–ï–õ–ï–§–û–ù–´ –ü–û –†–ê–ó–£–ú–ù–´–ú –¶–ï–ù–ê–ú! –î–õ–Ø –ó–ê–ö–ê–ó–ê –ü–ò–®–ò–¢–ï –°–û–û–ë–©–ï–ù–ò–Ø –í –õ–ò–ß–ö–£. \n –í–Ω–∏–º–∞–Ω–∏–µ!!!\n–ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—é Apple üá∫üá∏/üáØüáµ/üá™üá∫- 5 –î–ù–ï–ô (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–æ–¥—Å–∫–æ–≥–æ –±—Ä–∞–∫–∞). \n–°—Ä–æ–∫ –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É–∫–∞–∑–∞–Ω —Å –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. \n–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è \n—Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. \n–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±—Ä–∞–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¢–û–õ–¨–ö–û –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –≤–∏–¥–µ.",
        reply_markup=keyboard,
    )
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤!",
        reply_markup=keyboard,
    )
    bot.register_next_step_handler(message, proccess_product_category)


def proccess_product_category(message):
    category_name = message.text.split("(", 1)[0].strip()
    try:
        category = Category.objects.get(name=category_name)
        brands = Brand.objects.filter(category=category)

        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        for brand in brands:
            products = Product.objects.filter(category=category, brand=brand)
            button = types.KeyboardButton(text=f"{brand.name} ({products.count()})")
            keyboard.add(button)

        back_button = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        keyboard.add(back_button)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=keyboard)
        bot.register_next_step_handler(message, proccess_product_brand, category)
    except Category.DoesNotExist:
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ /catalog –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑.",
        )


def proccess_product_brand(message, category):
    brand_name = message.text.split("(", 1)[0].strip()
    try:
        brands = Brand.objects.filter(category=category, name=brand_name)
        brand = brands.first()
        products = Product.objects.filter(category=category, brand=brand).order_by("price").order_by("name")

        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        keyboard.add(button)

        products_text = ""
        for product in products:
            products_text += f"{product.name} - {round(int(product.price) / 100) * 100}{product.currency}\n\n"

        max_message_length = 4096

        text_chunks = [products_text[i:i + max_message_length] for i in range(0, len(products_text), max_message_length)]
    
        for chunk in text_chunks:
            bot.send_message(message.chat.id, text=chunk, reply_markup=keyboard)

    except Brand.DoesNotExist:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–µ–Ω–¥–æ—Ä–∞ –Ω–µ—Ç!")
    except Product.DoesNotExist:
        bot.send_message(
            message.chat.id, "–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–µ–Ω–¥–æ—Ä–∞."
        )


@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def go_back(message):
    product_catalog(message)


@bot.message_handler(commands=["about_us"])
def help(message):
    markup = types.ForceReply(selective=False)
    text = "–ö–æ–º–ø–∞–Ω–∏—è - –ú–ê–°–¢–ï–† GSM –ò–°–¢–†–ê. \n\n–ù–û–í–´–ï –¢–û–ü–û–í–´–ï –¢–ï–õ–ï–§–û–ù–´ –ü–û –†–ê–ó–£–ú–ù–´–ú –¶–ï–ù–ê–ú! –î–õ–Ø –ó–ê–ö–ê–ó–ê –ü–ò–®–ò–¢–ï –°–û–û–ë–©–ï–ù–ò–Ø –í –õ–ò–ß–ö–£.  \n\n–í–Ω–∏–º–∞–Ω–∏–µ!!! –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—é Apple 5 –î–ù–ï–ô (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–æ–¥—Å–∫–æ–≥–æ –±—Ä–∞–∫–∞). –°—Ä–æ–∫ –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É–∫–∞–∑–∞–Ω —Å –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±—Ä–∞–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¢–û–õ–¨–ö–û –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –≤–∏–¥–µ. \n –ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: 89774532753 \n–ú—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/id224104632"
    bot.send_message(message.chat.id, text=text, parse_mode="html", reply_markup=markup)


@bot.message_handler(commands=["contacts"])
def help(message):
    markup = types.ForceReply(selective=False)
    photo_path = "./media/tgbot_photo2.jpg"
    bot.send_photo(message.chat.id, open(photo_path, "rb"))
    bot.send_message(
        message.chat.id,
        f"–ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: 89774532753 \n\n–ê–¥—Ä–µ—Å: –≥–æ—Ä–æ–¥ –ò—Å—Ç—Ä–∞ , —É–ª. –ì–ª–∞–≤–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ê–¥–∞—Å—å–∫–æ, –¥.7 –∫–æ—Ä–ø—É—Å 2. (–û—Ä–∏–µ–Ω—Ç–∏—Ä: —Ä—è–¥–æ–º –∞–ø—Ç–µ–∫–∞ –°—Ç–æ–ª–∏—á–∫–∞ –∏ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è –¶–∏—Ä—é–ª—å–Ω–∏–∫, –≤ –æ–¥–Ω–æ–º –æ—Ñ–∏—Å–µ —Å –ø—É–Ω–∫—Ç–æ–º –≤—ã–¥–∞—á–∏ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –∏ –Æ–≤–µ–ª–∏—Ä–Ω—ã–º  –º–∞–≥–∞–∑–∏–Ω–æ–º).\n–Ø –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:vk.com/id224104632",
        parse_mode="html",
        reply_markup=markup,
    )


@bot.message_handler(commands=["alllist"])
def alllist(message):
    text = ""
    brands = Brand.objects.all()
    for brand in brands:
        text += f"\n------------------------------\n{brand.name}\n------------------------------\n"
        categories = brand.category.all()
        for category in categories:
            text += f"{category.name}\n"
            products = Product.objects.filter(brand=brand, category=category).order_by("price").order_by("name")
            for product in products:
                text += f"{product.name} - {round(int(product.price) / 100) * 100} {product.currency}\n"

    max_message_length = 4096

    text_chunks = [text[i:i + max_message_length] for i in range(0, len(text), max_message_length)]
    
    for chunk in text_chunks:
        bot.send_message(message.chat.id, chunk)


# ##################################################### ADMIN PART #######################################################################
@bot.message_handler(commands=["updateList"])
def updateList(message):
    markup = types.ForceReply(selective=False)
    Product.objects.all().delete()
    Category.objects.all().delete()
    Brand.objects.all().delete()
    bot.send_message(
        message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª",
        reply_markup=markup,
    )
    bot.register_next_step_handler(message, update_text_message)


@bot.message_handler(commands=["updateList"])
def updateList(message):
    markup = types.ForceReply(selective=False)
    bot.send_message(
        message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª",
        reply_markup=markup,
    )
    bot.register_next_step_handler(message, update_text_message)


def update_text_message(message):
    line_pattern = re.compile(r'^[-]+$')
    brand_pattern = re.compile(r'^([A-Z\s\U0001F300-\U0001F5FF]+|\d+)$', re.IGNORECASE)
    category_pattern = re.compile(r'^([–ê-–Ø–Å\s]+)$')
    product_pattern = re.compile(r'^([^\n]+)\s-\s(\d+)$')

    file_id = message.document.file_id
    file_info = bot.get_file(file_id)
    file_path = file_info.file_path

    file_content = bot.download_file(file_path).decode("utf-8")


    brand_name = None
    current_category = None

    for line in file_content.splitlines():
        line_match = line_pattern.match(line)
        brand_match = brand_pattern.match(line)
        category_match = category_pattern.match(line)
        product_match = product_pattern.match(line)
        if line.strip() == "–£–ú–ù–ê–Ø –ö–û–õ–û–ù–ö–ê":
            brand_name = "–£–ú–ù–ê–Ø –ö–û–õ–û–ù–ö–ê"
            line_match = True
            continue
        if line.strip() == "GO PRO":
            category_name = "GO PRO"
            brand_name = "GO PRO"
            category_match = True
            continue

        if line.strip() == "HONOR, HUAWEI":
            brand_name = "HONOR, HUAWEI"
            category_match = None
            continue

        if line_match:
            if brand_name:
                if brand_name == "üçé üçé":
                    current_brand = Brand.objects.get_or_create(name="APPLE IPHONE")[0]
                elif brand_name == "üçé":
                    current_brand = Brand.objects.get_or_create(name="APPLE")[0]
                else:
                    current_brand = Brand.objects.get_or_create(name=brand_name)[0]
            brand_name = None

        elif brand_match:
            brand_name = brand_match.group(1).strip()

        elif category_match:
            category_name = category_match.group(1).strip()
            current_category = Category.objects.get_or_create(name=category_name)[0]
            if current_brand:
                current_brand.category.add(current_category)

        elif product_match:
            product_name = product_match.group(1).strip()
            product_price = int(product_match.group(2))
            if Product.objects.filter(name=product_name).first():
                Product.objects.filter(name=product_name).first().delete()
                Product.objects.create(
                    name=product_name,
                    price=round(int(product_price) / 100) * 100,
                    brand=current_brand,
                    category=current_category
                    )
            else:
                Product.objects.create(
                    name=product_name,
                    price=round(int(product_price) / 100) * 100,
                    brand=current_brand,
                    category=current_category
                )
    current_brand = Brand.objects.get_or_create(name="GO PRO")[0]
    current_category = Category.objects.get_or_create(name="GO PRO")[0]
    current_brand.category.add(current_category)
    Product.objects.create(
        name="Go Pro HERO 10 Black",
        price=27500,
        brand=current_brand,
        category=current_category
    )
    Product.objects.create(
        name="Go Pro HERO 11 Black",
        price=31000,
        brand=current_brand,
        category=current_category
    )

    current_brand = Brand.objects.get_or_create(name="–£–ú–ù–ê–Ø –ö–û–õ–û–ù–ö–ê")[0]
    current_category = Category.objects.get_or_create(name="–ö–û–õ–û–ù–ö–ò")[0]
    current_brand.category.add(current_category)
    Product.objects.get_or_create(
        name="–∫–æ–ª–æ–Ω–∫–∞ Sber Boom Mini-—Å–∏–Ω–∏–π –Ω–µ–ø—Ç—É–Ω",
        price=1900,
        brand=current_brand,
        category=current_category
    )
    Product.objects.get_or_create(
        name="–∫–æ–ª–æ–Ω–∫–∞ –Ø–Ω–¥–µ–∫—Å —Å—Ç–∞–Ω—Ü–∏—è2 -–∫—Ä–∞—Å–Ω–∞—è",
        price=11700,
        brand=current_brand,
        category=current_category
    )
    Product.objects.get_or_create(
        name="–∫–æ–ª–æ–Ω–∫–∞ –Ø–Ω–¥–µ–∫—Å —Å—Ç–∞–Ω—Ü–∏—è2 -–ø–µ—Å–æ—á–Ω—ã–π",
        price=11700,
        brand=current_brand,
        category=current_category
    )
    Product.objects.get_or_create(
        name="–∫–æ–ª–æ–Ω–∫–∞ –Ø–Ω–¥–µ–∫—Å —Å—Ç–∞–Ω—Ü–∏—è2-—Å–∏–Ω—è—è",
        price=11700,
        brand=current_brand,
        category=current_category
    )
    Product.objects.get_or_create(
        name="–∫–æ–ª–æ–Ω–∫–∞ –Ø–Ω–¥–µ–∫—Å —Å—Ç–∞–Ω—Ü–∏—è2-—á—ë—Ä–Ω–∞—è",
        price=11700,
        brand=current_brand,
        category=current_category
    )
    Product.objects.get_or_create(
        name="–∫–æ–ª–æ–Ω–∫–∞ –Ø–Ω–¥–µ–∫—Å —Å—Ç–∞–Ω—Ü–∏—è –ú–∞–∫—Å Zigbee-–±–∏—Ä—é–∑–æ–≤—ã–π(–ë–∏—Ä—é–∑–æ–≤—ã–π)",
        price=24700,
        brand=current_brand,
        category=current_category
    )
    Product.objects.get_or_create(
        name="–∫–æ–ª–æ–Ω–∫–∞ –Ø–Ω–¥–µ–∫—Å —Å—Ç–∞–Ω—Ü–∏—è –ú–∞–∫—Å Zigbee-–∑–µ–ª—ë–Ω–∞—è",
        price=24700,
        brand=current_brand,
        category=current_category
    )
    Product.objects.get_or_create(
        name="–∫–æ–ª–æ–Ω–∫–∞ –Ø–Ω–¥–µ–∫—Å —Å—Ç–∞–Ω—Ü–∏—è –ú–∞–∫—Å –î—É–æ Zigbee-—á–µ—Ä–Ω–∞—è",
        price=32500,
        brand=current_brand,
        category=current_category
    )
    Product.objects.get_or_create(
        name="–∫–æ–ª–æ–Ω–∫–∞ –Ø–Ω–¥–µ–∫—Å —Å—Ç–∞–Ω—Ü–∏—è –ú–∏–¥–∏ Zigbee-–∏–∑—É–º—Ä—É–¥–Ω—ã–π (—Å —á–∞—Å–∞–º–∏)",
        price=11800,
        brand=current_brand,
        category=current_category
    )
        #     logging.debug(f"Created product: {product_name}, Price: {product_price}, Brand: {current_brand}, Category: {current_category}")
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button = types.KeyboardButton(text="–ø–æ–≤—ã—Å–∏—Ç—å")
    keyboard.add(button)
    button = types.KeyboardButton(text="–ø–æ–Ω–∏–∑–∏—Ç—å")
    keyboard.add(button)
    button = types.KeyboardButton(text="–Ω–µ—Ç")
    keyboard.add(button)
    bot.send_message(message.chat.id, "–í—ã—Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å –∏–ª–∏ –ø–æ–≤—ã—Å–∏—Ç—å —Ü–µ–Ω—É? –Ω–∞–ø–∏—à–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤(–ø–æ–≤—ã—Å–∏—Ç—å/–ø–æ–Ω–∏–∑–∏—Ç—å/–Ω–µ—Ç)", reply_markup=keyboard)
    bot.register_next_step_handler(message, process_choice)

def process_choice(message):
    text = message.text.lower()
    if text == "–ø–æ–≤—ã—Å–∏—Ç—å":
        bot.send_message(
            message.chat.id,
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–∏–µ —Ü–µ–Ω—ã –∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ. –ü—Ä–∏–º–µ—Ä: '10000, 30000 - 10%' –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –æ—Ç 10000 –¥–æ 30000 –Ω–∞ 10 %",
        )
        bot.register_next_step_handler(message, process_price_up_text)
    elif text == "–ø–æ–Ω–∏–∑–∏—Ç—å":
        bot.send_message(
            message.chat.id,
            "–ù–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É! –ü—Ä–∏–º–µ—Ä: 4000",
        )
        bot.register_next_step_handler(message, process_price_down_text)
    elif text == "–Ω–µ—Ç":
        bot.send_message(
            message.chat.id,
            "–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –ø—Ä–∞–π—Å",
        )
    else:
        bot.send_message(
            message.chat.id,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –ó–∞–Ω–æ–≤–æ –≤–≤–µ–¥–∏—Ç–µ /updateList",
        )

def process_price_up_text(message):
    pattern = re.compile(r'(\d+)\s*,?\s*(\d+)\s*-\s*(\d+)\s*%')
    matches = pattern.findall(message.text)

    price_updates = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

    for match in matches:
        start_range = int(match[0])
        end_range = int(match[1])
        percentage = int(match[2])

        products = Product.objects.filter(price__gte=start_range, price__lte=end_range)

        for product in products:
            new_price = int(product.price * (1 + percentage / 100))
            price_updates[product.id] = new_price

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    for product_id, new_price in price_updates.items():
        Product.objects.filter(id=product_id).update(price=new_price)

    bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")


def process_price_down_text(message):
    pattern = re.compile(r'(\d+)\s*,?\s*(\d+)\s*-\s*(\d+)\s*%')
    matches = pattern.findall(message.text)

    price_updates = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

    for match in matches:
        start_range = int(match[0])
        end_range = int(match[1])
        percentage = int(match[2])

        products = Product.objects.filter(price__gte=start_range, price__lte=end_range)

        for product in products:
            new_price = int(product.price * (1 - percentage / 100))
            price_updates[product.id] = new_price

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    for product_id, new_price in price_updates.items():
        Product.objects.filter(id=product_id).update(price=new_price)

    bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")




def proccess_priceDown_with_price_2_price_up(message, min_price, max_price):
    procent = message.text
    if procent == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É":
        return proccess_priceDown_with_price_2(message)
    try:
        markup = types.ForceReply(selective=False)
        products = Product.objects.filter(price__gte=min_price, price__lte=max_price)
        for product in products:
            product.price -= int(int(product.price) * float(procent) // 100)
            product.save()
        

        bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–µ–Ω? –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤(–ø–æ–≤—ã—Å–∏—Ç—å/–ø–æ–Ω–∏–∑–∏—Ç—å/–Ω–µ—Ç)", reply_markup=markup)
        bot.register_next_step_handler(message, process_choice)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")




# –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç –ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=["send_message"])
def send_message(message):
    user = Admin.objects.filter(UUID=int(message.chat.id)).first()
    if user:
        markup = types.ForceReply(selective=False)
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
            reply_markup=markup,
        )
        bot.register_next_step_handler(message, process_text)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")


def process_text(message):
    text = message.text.strip()
    markup = types.ForceReply(selective=False)
    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: \n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Ç–æ '-'",
        reply_markup=markup,
    )
    bot.register_next_step_handler(message, process_photo, text)


def process_photo(message, text):
    if message.photo:
        photo = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        users = UserBot.objects.all()

        for user in users:
            try:
                bot.send_photo(user.user_id, photo, caption=text)
                News.objects.create(text=text, photo=photo)
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")
        else:
            bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    else:
        users = UserBot.objects.all()

        for user in users:
            try:
                bot.send_message(user.user_id, text)
                News.objects.create(
                    text=text,
                )
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=["admin_add"])
def send_message(message):
    user = Admin.objects.filter(UUID=int(message.chat.id)).first()
    if user:
        markup = types.ForceReply(selective=False)
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=markup,
        )
        bot.register_next_step_handler(message, process_text_admin)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")


def process_text_admin(message):
    id_admin = message.text.strip()
    markup = types.ForceReply(selective=False)
    try:
        Admin.objects.create(UUID=id_admin)
        bot.send_message(
            message.chat.id,
            "–û—Ç–ª–∏—á–Ω–æ! –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω",
            reply_markup=markup,
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            "–ê–¥–º–∏–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ ID –æ—à–∏–±–æ—á–Ω—ã–π",
            reply_markup=markup,
        )


# –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@bot.message_handler(commands=["price_up_all"])
def priceUpAll(message):
    markup = types.ForceReply(selective=False)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞! –ü—Ä–∏–º–µ—Ä: 10",
        reply_markup=markup,
    )
    bot.register_next_step_handler(message, proccess_price_up_all)


def proccess_price_up_all(message):
    products = Product.objects.all()
    procent = message.text
    try:
        for product in products:
            product.price += int(product.price) * int(procent) // 100
            product.save()

        bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞.")


# –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
@bot.message_handler(commands=["price_up_with_price"])
def priceUpWithPrice(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É! –ü—Ä–∏–º–µ—Ä: 4000")
    bot.register_next_step_handler(message, proccess_priceUp_with_price)


def proccess_priceUp_with_price(message):
    min_price = message.text
    try:
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        back_button = types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É")
        keyboard.add(back_button)

        bot.send_message(
            message.chat.id,
            "–ù–∞–ø–∏—à–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É! –ü—Ä–∏–º–µ—Ä: 5000",
            reply_markup=keyboard,
        )
        bot.register_next_step_handler(
            message, proccess_priceUp_with_price_2, min_price
        )
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã!")


def proccess_priceUp_with_price_2(message, min_price):
    max_price = message.text
    try:
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        back_button = types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É")
        keyboard.add(back_button)

        bot.send_message(
            message.chat.id, "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç!", reply_markup=keyboard
        )
        bot.register_next_step_handler(
            message, proccess_priceUp_with_price_2_price_up, min_price, max_price
        )
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã!")


def proccess_priceUp_with_price_2_price_up(message, min_price, max_price):
    procent = message.text
    try:
        markup = types.ForceReply(selective=False)
        products = Product.objects.filter(price__gte=min_price, price__lte=max_price)
        for product in products:
            product.price += int(product.price) * int(procent) // 100
            product.save()

        bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–µ–Ω? –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤(–ø–æ–≤—ã—Å–∏—Ç—å/–ø–æ–Ω–∏–∑–∏—Ç—å/–Ω–µ—Ç)", reply_markup=markup)
        bot.register_next_step_handler(message, process_choice)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞.")
process_choice

@bot.message_handler(
    func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É"
)
def go_back(message):
    priceUpWithPrice(message)


# –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@bot.message_handler(commands=["price_up"])
def priceUp(message):
    categories = Category.objects.all()

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    for category in categories:
        button = types.KeyboardButton(text=category.name)
        keyboard.add(button)

    bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤!", reply_markup=keyboard
    )
    bot.register_next_step_handler(message, proccess_brand)


def proccess_brand(message):
    category_name = message.text
    try:
        category = Category.objects.get(name=category_name)
        brands = Brand.objects.filter(category=category)

        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        for brand in brands:
            button = types.KeyboardButton(text=brand.name)
            keyboard.add(button)

        back_button = types.KeyboardButton(text="–®–∞–≥ –Ω–∞–∑–∞–¥")
        keyboard.add(back_button)

        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–Ω–¥–æ—Ä–∞! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–Ω—è—Ç—å —Ü–µ–Ω—ã –Ω–∞ –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ '-'",
            reply_markup=keyboard,
        )
        bot.register_next_step_handler(message, proccess_price_brand, category)
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ–Ω–¥–æ—Ä–∞!")


def proccess_price_brand(message, category):
    brand_name = message.text
    markup = types.ForceReply(selective=False)
    try:
        if brand_name == "-":
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç:", reply_markup=markup)
            bot.register_next_step_handler(
                message, proccess_procent_only_category, category
            )
        else:
            brand = Brand.objects.filter(category=category, name=brand_name).first()
            products = Product.objects.filter(category=category, brand=brand)
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç:", reply_markup=markup)
            bot.register_next_step_handler(message, proccess_procent_brand, products)
    except Exception as e:
        bot.send_message(
            message.chat.id, f"–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–µ–Ω–¥–æ—Ä–∞. {str(e)}"
        )


def proccess_procent_only_category(message, category):
    procent = message.text
    try:
        markup = types.ForceReply(selective=False)
        products = Product.objects.filter(category=category)
        for product in products:
            product.price += int(product.price) * int(procent) // 100
            product.save()

        bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=markup)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞.")


def proccess_procent_brand(message, products):
    procent = message.text
    try:
        markup = types.ForceReply(selective=False)
        for product in products:
            product.price += int(product.price) * int(procent) // 100
            product.save()

        bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=markup)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞! –ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É {str(e)}")


@bot.message_handler(func=lambda message: message.text == "–®–∞–≥ –Ω–∞–∑–∞–¥")
def go_back(message):
    priceUp(message)

# –ü–æ–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞
@bot.message_handler(commands=["price_down"])
def priceDown(message):
    categories = Category.objects.all()

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    for category in categories:
        button = types.KeyboardButton(text=category.name)
        keyboard.add(button)

    bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤!", reply_markup=keyboard
    )
    bot.register_next_step_handler(message, proccess_brand_down)


def proccess_brand_down(message):
    category_name = message.text
    try:
        category = Category.objects.get(name=category_name)
        brands = Brand.objects.filter(category=category)

        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        for brand in brands:
            button = types.KeyboardButton(text=brand.name)
            keyboard.add(button)

        back_button = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
        keyboard.add(back_button)

        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–Ω–¥–æ—Ä–∞! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É—Å—Ç–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ '-'",
            reply_markup=keyboard,
        )
        bot.register_next_step_handler(message, proccess_price_brand_down, category)
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ–Ω–¥–æ—Ä–∞!")


def proccess_price_brand_down(message, category):
    brand_name = message.text
    markup = types.ForceReply(selective=False)
    try:
        if brand_name == "-":
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç:", reply_markup=markup)
            bot.register_next_step_handler(
                message, proccess_procent_only_category_down, category
            )
        else:
            brand = Brand.objects.get(category=category, name=brand_name)
            products = Product.objects.filter(category=category, brand=brand)
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç:", reply_markup=markup)
            bot.register_next_step_handler(message, proccess_procent_brand_down, products)
    except Exception:
        bot.send_message(
            message.chat.id, "–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–µ–Ω–¥–æ—Ä–∞."
        )


def proccess_procent_only_category_down(message, category):
    procent = message.text
    try:
        markup = types.ForceReply(selective=False)
        products = Product.objects.filter(category=category)
        for product in products:
            product.price -= int(product.price) * int(procent) // 100
            product.save()

        bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=markup)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞.")


def proccess_procent_brand_down(message, products):
    procent = message.text
    try:
        markup = types.ForceReply(selective=False)
        for product in products:
            product.price -= int(product.price) * int(procent) // 100
            product.save()

        bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=markup)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞.")


@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
def go_back(message):
    priceDown(message)


# –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
@bot.message_handler(commands=["price_down_with_price"])
def priceDownWithPrice(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É! –ü—Ä–∏–º–µ—Ä: 1000")
    bot.register_next_step_handler(message, proccess_priceDown_with_price)


def proccess_priceDown_with_price(message):
    min_price = message.text
    if min_price == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É":
        return priceDownWithPrice(message)
    try:
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        back_button = types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É")
        keyboard.add(back_button)

        bot.send_message(
            message.chat.id,
            "–ù–∞–ø–∏—à–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É! –ü—Ä–∏–º–µ—Ä: 10000",
            reply_markup=keyboard,
        )
        bot.register_next_step_handler(
            message, proccess_priceDown_with_price_2, min_price
        )
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã!")


def proccess_priceDown_with_price_2(message, min_price):
    max_price = message.text
    if max_price == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É":
        return proccess_priceDown_with_price(message)
    try:
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        back_button = types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É")
        keyboard.add(back_button)

        bot.send_message(
            message.chat.id, "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç!", reply_markup=keyboard
        )
        bot.register_next_step_handler(
            message, proccess_priceDown_with_price_2_price_up, min_price, max_price
        )
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã!")


def proccess_priceDown_with_price_2_price_up(message, min_price, max_price):
    procent = message.text
    if procent == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É":
        return proccess_priceDown_with_price_2(message)
    try:
        markup = types.ForceReply(selective=False)
        products = Product.objects.filter(price__gte=min_price, price__lte=max_price)
        for product in products:
            product.price -= int(int(product.price) * float(procent) // 100)
            product.save()
        

        bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–µ–Ω? –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤(–ø–æ–≤—ã—Å–∏—Ç—å/–ø–æ–Ω–∏–∑–∏—Ç—å/–Ω–µ—Ç)", reply_markup=markup)
        bot.register_next_step_handler(message, process_choice)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@bot.message_handler(commands=["product_add"])
def product_add(message):
    user = Admin.objects.filter(UUID=int(message.chat.id)).first()
    if user:
        markup = types.ForceReply(selective=False)
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=markup,
        )
        bot.register_next_step_handler(message, process_price)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")


def process_price(message):
    name = message.text.strip()
    markup = types.ForceReply(selective=False)
    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: 10000",
        reply_markup=markup,
    )
    bot.register_next_step_handler(message, process_currency, name)


def process_currency(message, name):
    price = message.text.strip()
    markup = types.ForceReply(selective=False)
    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É —Ü–µ–Ω—ã (–∑–Ω–∞–∫). –ü—Ä–∏–º–µ—Ä: ‚ÇΩ",
        reply_markup=markup,
    )
    bot.register_next_step_handler(message, process_category, name, price)


def process_category(message, name, price):
    currency = message.text.strip()
    categories = Category.objects.all()

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    for category in categories:
        button = types.KeyboardButton(text=category.name)
        keyboard.add(button)

    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é",
        reply_markup=keyboard,
    )
    bot.register_next_step_handler(message, process_brand, name, price, currency)


def process_brand(message, name, price, currency):
    category_name = message.text
    try:
        category = Category.objects.get(name=category_name)
    except Category.DoesNotExist:
        category = None
    if not category:
        category = Category.objects.create(name=category_name)
    brands = Brand.objects.filter(category=category)
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    for brand in brands:
        button = types.KeyboardButton(text=brand.name)
        keyboard.add(button)

    bot.send_message(
        message.chat.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ç–æ –æ–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        reply_markup=keyboard,
    )
    bot.register_next_step_handler(
        message, process_end, name, price, currency, category
    )


def process_end(message, name, price, currency, category):
    brand_name = message.text
    try:
        brands = Brand.objects.filter(name=brand_name)
        brand = brands.first()
        brand.category.set([category])
    except Brand.DoesNotExist:
        brand = None
    except Exception:
        brand = None
    if not brand:
        brand = Brand.objects.create(name=brand_name)
        brand.category.set([category])
    markup = types.ForceReply(selective=False)
    try:
        Product.objects.create(
            name=name, price=price, currency=currency, category=category, brand=brand
        )

        bot.send_message(
            message.chat.id,
            "–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫!",
            reply_markup=markup,
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ, –≤—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±–ª–∏—Å—å!",
            reply_markup=markup,
        )


# –õ–æ–≤–∏—Ç –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler()
def info(message):
    if message.text.lower() == "id":
        bot.reply_to(message, f"ID: {message.from_user.id}")
        admin_id = Admin.objects.filter(UUID=message.from_user.id)
        if admin_id:
            bot.reply_to(
                message,
                f"–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –æ—Å–æ–±–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. \n\n/admin_add - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞\n\n/product_add - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ \n\n/price_up_with_price - –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ \n\n/price_up - –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±—Ä–µ–Ω–¥—É \n\n/price_up_all - –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ \n\n/price_down - –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –≤–µ–Ω–¥–æ—Ä—É  \n\n/price_down_with_price - –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ \n\n/send_message - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —é–∑–µ—Ä–∞–º \n\n/updateList - –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ –ø—Ä–∞–π—Å–∞ –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º",
            )
    bot.reply_to(message, f"–õ—É—á—à–µ –∑–∞–∫–∞–∂–∏—Ç–µ —É –Ω–∞—Å!")


def start_bot():
    bot.polling(non_stop=True)


def stop_bot():
    bot.stop_polling()
